Obtaining a Git Repo:
    1. Initialize
    2. Clone

Initializing a Git Repo - project directories not currently under version control are eligible to be initialized with Git. To achieve this, you must be located in that project directory then use the "git init" command.

Cloning an Existing Git Repo - project directories which contain .git are eligible to be cloned using the "git clone" command.  This creates a full copy of nearly all data contained in the git repo.

Checkout - a working copy of all the files in a Git repo.

File States:
    Tracked - files that were contained in the last snapshot.
        Unmodified
        Modified
        Staged
    Untracked - files that are new to the Git repo, have been removed, or are being ignored.

Checking file status - the command "git status" will help determine which state a file or collection of files is in.

Tracking New Files - untracked files can be tracked by simply running the "git add <filename>" command.

Staging Modified Files - a file that is tracked and has been changed must be staged before it is saved. This is achieved with the "git add <filename>" command.

Ignoring Files - when there are files that should not be tracked by the repository, a .gitignore file in the root of the project will take care of making sure they are never tracked.  To achieve this you can simply create the file in the root directory and within that file write the name or pattern of named files to that file. 
    Ex. *.[oa] - ignores any files ending in .o (object files) or .a (archive files)

    .gitignore rules:
        . blank lines or lines starting with # are ignored
        . glob patterns are used, and will apply recursively throughout the working tree
        . patterns starting with a forward slash are used to avoid recursivity
        . patterns ending with a forward slash are used to specify a directory
        . patterns can be negated when starting with an exclamation point
    
    Glob Patterns:
        *       - zero or more characters
        [abc]   - any character inside the brackets
        ?       - single character
        [0-9]   - and character between the hyphen inclusive
        a/**/z  - nested directories (a/z, a/b/z, a/b/c/z, etc)

Viewing Changes - 
    git diff - using this command we can see the exact changes in a file, and not just the files that were changed in a list.

Saving Changes - 
    git commit -m "message" - records the snapshot contained in the staging area, unstaged changes will remain unrecorded.

    git commit -a -m "message" - skips the staging area and commits all tracked files directly

Removing Files - removing files from Git is a little more complicated than it appears, they must be removed from the tracked files and then also removed from the remote repository if one exists.
    git rm - removes a file from tracking and from the working directory.

Moving Files - 
    git mv [file_from] [file_to] - can be used to rename files, but is equivalent to removing the file and creating a new one.

Viewing Commit History - 
    git log - used to see the save/snapshot/commit history of the project in a repository.

Undoing Things - 
    git commit --amend - can be used to add additional files to a commit or change the commit message.

    git reset HEAD <filename> - used to unstage staged changes.

    git checkout -- <filename> - used to revert a modified file to its unmodified state. It removes all local changes to that file and can be a dangerous command if used negligently.

    git restore -- alternative to git reset, it can be used to unstage a file, or unmodify a file
        --staged <filename>

Remote Repositories - versions of a project that are hosted on the internet or intranet, they can be made to be read only or read/write for specific individuals, and enable high levels of collaboration.

    Showing Remotes
        git remote - lists the shortnames of each remote handle that was specified.

    Adding Remotes
        git clone - implicitly adds the origin remote
        git remote add <shortname> <url> - used to explicitly add a new remote repository

    Fetching and Pulling from Remotes
        fetching only downloads the data to your local repository, it doesn't automatically merge, or modify anything that's being worked on.

        git fetch <remote> - used to get gata from remote projects
        git fetch origin - used to get any new data from the remote project that has been added since the project was cloned, or since the last time a fetch or pull was made.

        git pull - used when the current branch is set up to track a remote branch, it automatically fetches and merges the remote branch to the current branch unless there are merge conflicts.

    Pushing to Remotes
        in order to push to a remote branch you must first fetch the work on the branch otherwise the push will be rejected.

        git push - used to share or save the progress of a project and will only work if you have write access to the project you are pushing to.
            git push <remote> <branch>

    Inspecting a Remote
        git remote show origin - shows information about a particular remote project, such as remote branches, the local branch, and configuration information.

    Renaming and Removing Remotes
        git remote rename - used to change a remote's shortname, but will also change all remote-tracking branch names as well.

        get remote remove/rm - used to remove a remote from the project, it will also remove all remote-tracking branches and configuration settings associated with that remote.
        
Tagging - the ability to mark certain points in a repository's history as important, it's typically used to denote release points.

    Listing Tags
        git tag --list - used to list the existing tags in a Git repo in alphabetical order
            "search criteria" - using the optional search criteria parameter, tags can be searched for that match a specific pattern.
    Creating Tags
        Annotated Tags - stored as a full object in the Git database, with a checksum containing the tagger's name, email, date, and message. They can be signed and verified with GNU Privacy Guard.
            git tag -a <tagname> -m "message"

        Lightweight Tags - pointer to a specific commit
            git tag <tagname>

        Tags can be created late by supplying the checksum of a commit to the end of the git tag command.
    Showing Tags
        git show <tagname> - used to see tag information, that was stored when the tag was created
    Sharing Tags - by default the git push command does not transfer tags to remote servers. So they need to be explicitly provided.
        git push origin <tagname> - used to explicity push a tag to a remote
        git push origin --tags - used to push all existing tags to the remote server
    Deleting Tags
        git tag -d <tagname> - used to delete a tag on the local repository
        git push <remote> :refs/tags/<tagname>: - used to delete a tag on a remote server.
        git push origin --delete <tagname> - used to delete a tag on a remote.
    Checking Out Tags
        git checkout <tagname> - used to view the versions of a file a tag is pointing to, putting the local repo in a "detached HEAD" state.
Git Aliases - 
    git config --global alias.co checkout - used to create an alias of the checkout command called co.
    git config --global alias.unstage 'reset HEAD --' - used to create an alias of the reset head -- command called unstage.
    git config --global alias.last 'log -1 HEAD' - used to create an alias to see the latest commit.

    If implemented properly, Git aliases can greatly simplify commands that might be otherwise tedious to manage.

    External Commands - 
    git config --global alias.visual '!gitk' - used to create an alias of an external command. The '!' character is required to specify that the command is external.